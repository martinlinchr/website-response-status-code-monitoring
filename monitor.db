import sqlite3

def init_db():
    conn = sqlite3.connect('monitor.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS domains
                 (url TEXT PRIMARY KEY, 
                  speed_threshold REAL DEFAULT 2.0,
                  enabled INTEGER DEFAULT 1)''')
    conn.commit()
    return conn

def add_domain(conn, url, speed_threshold=2.0):
    c = conn.cursor()
    c.execute('INSERT OR REPLACE INTO domains (url, speed_threshold) VALUES (?, ?)',
              (url, speed_threshold))
    conn.commit()

def get_domains(conn):
    c = conn.cursor()
    c.execute('SELECT url, speed_threshold FROM domains WHERE enabled = 1')
    return c.fetchall()

def remove_domain(conn, url):
    c = conn.cursor()
    c.execute('DELETE FROM domains WHERE url = ?', (url,))
    conn.commit()

# Modified Streamlit UI
st.title('Website Monitor')

# Initialize database
conn = init_db()

# Add website
new_website = st.text_input('Add website (include https://)')
if new_website:
    add_domain(conn, new_website, speed_threshold)
    st.success(f'Added {new_website}')

# Display domains
domains = get_domains(conn)
if domains:
    results = []
    for url, threshold in domains:
        result = check_website(url, threshold)
        results.append(result)
    
    df = pd.DataFrame(results)
    styled_df = df.style.applymap(style_df)
    st.dataframe(styled_df, use_container_width=True)

    # Remove website option
    to_remove = st.selectbox('Select website to remove', [d[0] for d in domains])
    if st.button('Remove Selected'):
        remove_domain(conn, to_remove)
        st.experimental_rerun()
